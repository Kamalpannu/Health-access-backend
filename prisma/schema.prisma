// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  role     Role    @default(PATIENT)
  auth0Id  String  @unique
  avatar   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Doctor   Doctor?
  Patient  Patient?
}

model Doctor {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization  String?
  licenseNumber   String?
  hospital        String?
  patients        Patient[] @relation("DoctorPatient")
  records        Record[]
  accessRequests  AccessRequest[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Patient {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth    DateTime?
  phoneNumber    String?
  address        String?
  emergencyContact String?
  bloodType      String?
  allergies      String?
  doctors        Doctor[] @relation("DoctorPatient")
  records        Record[]
  accessRequests AccessRequest[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Record {
  id          String   @id @default(uuid())
  title       String
  content     String
  diagnosis   String?
  treatment   String?
  medications String?
  notes       String?
  patientId   String
  doctorId    String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessRequest {
  id        String   @id @default(uuid())
  doctorId  String
  patientId String
  status    RequestStatus @default(PENDING)
  reason    String?
  message   String?
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([doctorId, patientId])
}

enum Role {
  UNASSIGNED
  DOCTOR
  PATIENT
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}
